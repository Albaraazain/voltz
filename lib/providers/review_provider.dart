import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../core/utils/api_response.dart';
import '../models/review_model.dart';
import '../repositories/review_repository.dart';

class ReviewProvider extends ChangeNotifier {
  final ReviewRepository _repository;
  final String? _currentUserId;

  ApiResponse<List<ReviewModel>> _reviews = ApiResponse.initial();
  ApiResponse<Map<String, dynamic>> _reviewStats = ApiResponse.initial();
  StreamSubscription<ApiResponse<List<ReviewModel>>>? _reviewSubscription;

  ReviewProvider(SupabaseClient supabase, [this._currentUserId])
      : _repository = ReviewRepository(supabase);

  ApiResponse<List<ReviewModel>> get reviews => _reviews;
  ApiResponse<Map<String, dynamic>> get reviewStats => _reviewStats;

  /// Load reviews for an electrician
  Future<void> loadElectricianReviews(String electricianId) async {
    _reviews = ApiResponse.loading();
    notifyListeners();

    _reviews = await _repository.getElectricianReviews(
      electricianId,
      limit: 10,
    );
    notifyListeners();
  }

  /// Load review statistics for an electrician
  Future<void> loadElectricianReviewStats(String electricianId) async {
    _reviewStats = ApiResponse.loading();
    notifyListeners();

    _reviewStats = await _repository.getElectricianReviewStats(electricianId);
    notifyListeners();
  }

  /// Submit a new review
  Future<ApiResponse<ReviewModel>> submitReview({
    required String electricianId,
    required String homeownerId,
    required String jobId,
    required int rating,
    String? comment,
    List<String>? photos,
  }) async {
    final now = DateTime.now();
    final review = ReviewModel(
      id: '', // Will be generated by the database
      electricianId: electricianId,
      homeownerId: homeownerId,
      jobId: jobId,
      rating: rating,
      comment: comment,
      photos: photos,
      createdAt: now,
      updatedAt: now,
    );

    final response = await _repository.create(review);
    if (response.hasData) {
      // Refresh the reviews list if we're viewing this electrician's reviews
      if (_reviews.hasData &&
          _reviews.data!.isNotEmpty &&
          _reviews.data!.first.electricianId == electricianId) {
        loadElectricianReviews(electricianId);
      }
      // Refresh the stats
      loadElectricianReviewStats(electricianId);
    }

    return response;
  }

  /// Add a reply to a review
  Future<ApiResponse<ReviewModel>> addReply(
    String reviewId,
    String reply,
  ) async {
    final response = await _repository.addElectricianReply(reviewId, reply);
    if (response.hasData) {
      // Update the review in the current list if it exists
      if (_reviews.hasData) {
        final index = _reviews.data!.indexWhere((r) => r.id == reviewId);
        if (index != -1) {
          final updatedReviews = List<ReviewModel>.from(_reviews.data!);
          updatedReviews[index] = response.data!;
          _reviews = ApiResponse.success(updatedReviews);
          notifyListeners();
        }
      }
    }
    return response;
  }

  /// Start listening to new reviews for an electrician
  void startListeningToReviews(String electricianId) {
    _reviewSubscription?.cancel();
    _reviewSubscription =
        _repository.streamElectricianReviews(electricianId).listen((response) {
      _reviews = response;
      notifyListeners();
    });
  }

  /// Stop listening to reviews
  void stopListeningToReviews() {
    _reviewSubscription?.cancel();
    _reviewSubscription = null;
  }

  /// Get pending reviews (for moderators)
  Future<ApiResponse<List<ReviewModel>>> getPendingReviews() {
    return _repository.getPendingReviews();
  }

  /// Verify a review (for moderators)
  Future<ApiResponse<ReviewModel>> verifyReview(String reviewId) async {
    final response = await _repository.verifyReview(reviewId);
    if (response.hasData) {
      // Update the review in the current list if it exists
      if (_reviews.hasData) {
        final index = _reviews.data!.indexWhere((r) => r.id == reviewId);
        if (index != -1) {
          final updatedReviews = List<ReviewModel>.from(_reviews.data!);
          updatedReviews[index] = response.data!;
          _reviews = ApiResponse.success(updatedReviews);
          notifyListeners();
        }
      }
    }
    return response;
  }

  /// Load reviews for a specific job
  Future<ApiResponse<List<ReviewModel>>> getJobReviews(String jobId) {
    return _repository.getJobReviews(jobId);
  }

  @override
  void dispose() {
    stopListeningToReviews();
    super.dispose();
  }
}
